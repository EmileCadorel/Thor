mod sdl2::events;
import sdl2::keycode, sdl2::keyboard, sdl2::joystick, sdl2::touch, sdl2::gesture;


/* General keyboard/mouse state definitions */
pub aka SDL_RELEASED   = 0u32
pub aka SDL_PRESSED = 1u32

/**
 * \brief The types of events that can be delivered.
 */
pub enum
| SDL_FIRSTEVENT     = 0u32     /**< Unused (do not remove) */

    /* Application events */
| SDL_QUIT           = 0x100u32 /**< User-requested quit */

    /* These application events have special meaning on iOS, see README-ios.md for details */
| SDL_APP_TERMINATING = 0x101u32        /**< The application is being terminated by the OS
                                     Called on iOS in applicationWillTerminate()
                                     Called on Android in onDestroy()
                                */
| SDL_APP_LOWMEMORY = 0x102u32          /**< The application is low on memory, free memory if possible.
                                     Called on iOS in applicationDidReceiveMemoryWarning()
                                     Called on Android in onLowMemory()
                                */
| SDL_APP_WILLENTERBACKGROUND = 0x103u32 /**< The application is about to enter the background
                                     Called on iOS in applicationWillResignActive()
                                     Called on Android in onPause()
                                */
| SDL_APP_DIDENTERBACKGROUND = 0x104u32 /**< The application did enter the background and may not get CPU for some time
                                     Called on iOS in applicationDidEnterBackground()
                                     Called on Android in onPause()
                                */
| SDL_APP_WILLENTERFOREGROUND = 0x105u32 /**< The application is about to enter the foreground
                                     Called on iOS in applicationWillEnterForeground()
                                     Called on Android in onResume()
                                */
| SDL_APP_DIDENTERFOREGROUND = 0x106u32 /**< The application is now interactive
                                     Called on iOS in applicationDidBecomeActive()
                                     Called on Android in onResume()
                                */

    /* Display events */
| SDL_DISPLAYEVENT   = 0x150u32  /**< Display state change */

    /* Window events */
| SDL_WINDOWEVENT    = 0x200u32 /**< Window state change */
| SDL_SYSWMEVENT = 0x201u32             /**< System specific event */

    /* Keyboard events */
| SDL_KEYDOWN        = 0x300u32 /**< Key pressed */
| SDL_KEYUP = 0x301u32                  /**< Key released */
| SDL_TEXTEDITING = 0x302u32            /**< Keyboard text editing (composition) */
| SDL_TEXTINPUT = 0x303u32              /**< Keyboard text input */
| SDL_KEYMAPCHANGED = 0x304u32          /**< Keymap changed due to a system event such as an
                                     input language or keyboard layout change.
                                */

    /* Mouse events */
| SDL_MOUSEMOTION    = 0x400u32 /**< Mouse moved */
| SDL_MOUSEBUTTONDOWN = 0x401u32        /**< Mouse button pressed */
| SDL_MOUSEBUTTONUP = 0x402u32          /**< Mouse button released */
| SDL_MOUSEWHEEL = 0x403u32             /**< Mouse wheel motion */

    /* Joystick events */
| SDL_JOYAXISMOTION  = 0x600u32 /**< Joystick axis motion */
| SDL_JOYBALLMOTION = 0x601u32          /**< Joystick trackball motion */
| SDL_JOYHATMOTION = 0x602u32           /**< Joystick hat position change */
| SDL_JOYBUTTONDOWN = 0x603u32          /**< Joystick button pressed */
| SDL_JOYBUTTONUP = 0x604u32            /**< Joystick button released */
| SDL_JOYDEVICEADDED = 0x605u32         /**< A new joystick has been inserted into the system */
| SDL_JOYDEVICEREMOVED = 0x606u32       /**< An opened joystick has been removed */

    /* Game controller events */
| SDL_CONTROLLERAXISMOTION  = 0x650u32 /**< Game controller axis motion */
| SDL_CONTROLLERBUTTONDOWN = 0x651u32          /**< Game controller button pressed */
| SDL_CONTROLLERBUTTONUP = 0x652u32            /**< Game controller button released */
| SDL_CONTROLLERDEVICEADDED = 0x653u32         /**< A new Game controller has been inserted into the system */
| SDL_CONTROLLERDEVICEREMOVED = 0x654u32       /**< An opened Game controller has been removed */
| SDL_CONTROLLERDEVICEREMAPPED = 0x655u32      /**< The controller mapping was updated */

    /* Touch events */
| SDL_FINGERDOWN      = 0x700u32
| SDL_FINGERUP = 0x701u32
| SDL_FINGERMOTION = 0x702u32

    /* Gesture events */
| SDL_DOLLARGESTURE   = 0x800u32
| SDL_DOLLARRECORD = 0x801u32
| SDL_MULTIGESTURE = 0x802u32

    /* Clipboard events */
| SDL_CLIPBOARDUPDATE = 0x900u32 /**< The clipboard changed */

    /* Drag and drop events */
| SDL_DROPFILE        = 0x1000u32 /**< The system requests a file open */
| SDL_DROPTEXT = 0x1001u32                 /**< text/plain drag-and-drop event */
| SDL_DROPBEGIN = 0x1002u32                /**< A new set of drops is beginning (NULL filename) */
| SDL_DROPCOMPLETE = 0x1003u32             /**< Current set of drops is now complete (NULL filename) */

    /* Audio hotplug events */
| SDL_AUDIODEVICEADDED = 0x1100u32 /**< A new audio device is available */
| SDL_AUDIODEVICEREMOVED = 0x1101u32        /**< An audio device has been removed. */

    /* Sensor events */
| SDL_SENSORUPDATE = 0x1200u32     /**< A sensor was updated */

    /* Render events */
| SDL_RENDER_TARGETS_RESET = 0x2000u32 /**< The render targets have been reset and their contents need to be updated */
| SDL_RENDER_DEVICE_RESET = 0x2001u32 /**< The device has been reset and all textures need to be recreated */

    /** Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
     *  and should be allocated with SDL_RegisterEvents()
     */
| SDL_USEREVENT    = 0x8000u32

    /**
     *  This last event is only for bounding internal arrays
     */
| SDL_LASTEVENT    = 0xFFFFu32
-> SDL_EventType;

/**
 *  \brief Fields shared by every event
 */
pub struct
| type : u32
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
 -> SDL_CommonEvent;

/**
 *  \brief Display state change event data (event.display.*)
 */
pub struct 
| type : u32        /**< ::SDL_DISPLAYEVENT */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| display : u32     /**< The associated display index */
| event : u8        /**< ::SDL_DisplayEventID */
| padding1 : u8
| padding2 : u8
| padding3 : u8
| data1 : i32       /**< event dependent data */
 -> SDL_DisplayEvent;

/**
 *  \brief Window state change event data (event.window.*)
 */
pub struct 
| type : u32        /**< ::SDL_WINDOWEVENT */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The associated window */
| event : u8        /**< ::SDL_WindowEventID */
| padding1 : u8
| padding2 : u8
| padding3 : u8
| data1 : i32       /**< event dependent data */
| data2 : i32       /**< event dependent data */
 -> SDL_WindowEvent;

/**
 *  \brief Keyboard button event structure (event.key.*)
 */
pub struct 
| type : u32        /**< ::SDL_KEYDOWN or ::SDL_KEYUP */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The window with keyboard focus, if any */
| state : u8        /**< ::SDL_PRESSED or ::SDL_RELEASED */
| repeat : u8       /**< Non-zero if this is a key repeat */
| padding2 : u8
| padding3 : u8
| keysym : SDL_Keysym   /**< The key that was pressed or released */
 -> SDL_KeyboardEvent;

pub aka SDL_TEXTEDITINGEVENT_TEXT_SIZE = 32u32
    
/**
 *  \brief Keyboard text editing event structure (event.edit.*)
 */
pub struct 
| type : u32                             /**< ::SDL_TEXTEDITING */
| timestamp : u32                           /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32                            /**< The window with keyboard focus, if any */
| text : [c8 ; SDL_TEXTEDITINGEVENT_TEXT_SIZE]  /**< The editing text */
| start : i32                               /**< The start cursor of selected editing text */
| length : i32                              /**< The length of selected editing text */
 -> SDL_TextEditingEvent;


pub aka SDL_TEXTINPUTEVENT_TEXT_SIZE = 32u32
/**
 *  \brief Keyboard text input event structure (event.text.*)
 */
pub struct 
| type : u32                              /**< ::SDL_TEXTINPUT */
| timestamp : u32                         /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32                          /**< The window with keyboard focus, if any */
| text : [c8 ; SDL_TEXTINPUTEVENT_TEXT_SIZE]  /**< The input text */
 -> SDL_TextInputEvent;

/**
 *  \brief Mouse motion event structure (event.motion.*)
 */
pub struct 
| type : u32        /**< ::SDL_MOUSEMOTION */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The window with mouse focus, if any */
| which : u32       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
| state : u32       /**< The current button state */
| x : i32           /**< X coordinate, relative to window */
| y : i32           /**< Y coordinate, relative to window */
| xrel : i32        /**< The relative motion in the X direction */
| yrel : i32        /**< The relative motion in the Y direction */
 -> SDL_MouseMotionEvent;

/**
 *  \brief Mouse button event structure (event.button.*)
 */
pub struct 
| type : u32        /**< ::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The window with mouse focus, if any */
| which : u32       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
| button : u8       /**< The mouse button index */
| state : u8        /**< ::SDL_PRESSED or ::SDL_RELEASED */
| clicks : u8       /**< 1 for single-click, 2 for double-click, etc. */
| padding1 : u8
| x : i32           /**< X coordinate, relative to window */
| y : i32           /**< Y coordinate, relative to window */
 -> SDL_MouseButtonEvent;

/**
 *  \brief Mouse wheel event structure (event.wheel.*)
 */
pub struct
| type : u32        /**< ::SDL_MOUSEWHEEL */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The window with mouse focus, if any */
| which : u32       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
| x : i32           /**< The amount scrolled horizontally, positive to the right and negative to the left */
| y : i32           /**< The amount scrolled vertically, positive away from the user and negative toward the user */
| direction : u32   /**< Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back */
-> SDL_MouseWheelEvent;

/**
 *  \brief Joystick axis motion event structure (event.jaxis.*)
 */
pub struct
| type : u32        /**< ::SDL_JOYAXISMOTION */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : SDL_JoystickID /**< The joystick instance id */
| axis : u8         /**< The joystick axis index */
| padding1 : u8
| padding2 : u8
| padding3 : u8
| value : i16       /**< The axis value (range: -32768 to 32767) */
| padding4 : i16
-> SDL_JoyAxisEvent;

/**
 *  \brief Joystick trackball motion event structure (event.jball.*)
 */
pub struct 
| type : u32        /**< ::SDL_JOYBALLMOTION */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : SDL_JoystickID /**< The joystick instance id */
| ball : u8         /**< The joystick trackball index */
| padding1 : u8
| padding2 : u8
| padding3 : u8
| xrel : i16        /**< The relative motion in the X direction */
| yrel : i16        /**< The relative motion in the Y direction */
 -> SDL_JoyBallEvent;

/**
 *  \brief Joystick hat position change event structure (event.jhat.*)
 */
pub struct 
|  type : u32     /**< ::SDL_JOYHATMOTION */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : SDL_JoystickID /**< The joystick instance id */
| hat : u8          /**< The joystick hat index */
| value : u8        /**< The hat position value.
                         *   \sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP
                         *   \sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT
                         *   \sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN
                         *
                         *   Note that zero means the POV is centered.
                         */
| padding1 : u8
| padding2 : u8
 -> SDL_JoyHatEvent;

/**
 *  \brief Joystick button event structure (event.jbutton.*)
 */
pub struct 
| type : u32        /**< ::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
|  which : SDL_JoystickID /**< The joystick instance id */
| button : u8       /**< The joystick button index */
| state : u8        /**< ::SDL_PRESSED or ::SDL_RELEASED */
| padding1 : u8
| padding2 : u8
 -> SDL_JoyButtonEvent;

/**
 *  \brief Joystick device event structure (event.jdevice.*)
 */
pub struct
| type : u32        /**< ::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : i32       /**< The joystick device index for the ADDED event, instance id for the REMOVED event */
 -> SDL_JoyDeviceEvent;


/**
 *  \brief Game controller axis motion event structure (event.caxis.*)
 */
pub struct 
| type : u32        /**< ::SDL_CONTROLLERAXISMOTION */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : SDL_JoystickID /**< The joystick instance id */
| axis : u8         /**< The controller axis (SDL_GameControllerAxis) */
| padding1 : u8
| padding2 : u8
| padding3 : u8
| value : i16       /**< The axis value (range: -32768 to 32767) */
| padding4 : u16
 -> SDL_ControllerAxisEvent;


/**
 *  \brief Game controller button event structure (event.cbutton.*)
 */
pub struct 
| type : u32        /**< ::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : SDL_JoystickID /**< The joystick instance id */
| button : u8       /**< The controller button (SDL_GameControllerButton) */
| state : u8        /**< ::SDL_PRESSED or ::SDL_RELEASED */
| padding1 : u8
| padding2 : u8
 -> SDL_ControllerButtonEvent;


/**
 *  \brief Controller device event structure (event.cdevice.*)
 */
pub struct
| type : u32        /**< ::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, or ::SDL_CONTROLLERDEVICEREMAPPED */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : i32       /**< The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event */
 -> SDL_ControllerDeviceEvent;

/**
 *  \brief Audio device event structure (event.adevice.*)
 */
pub struct 
|  type : u32        /**< ::SDL_AUDIODEVICEADDED, or ::SDL_AUDIODEVICEREMOVED */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : u32       /**< The audio device index for the ADDED event (valid until next SDL_GetNumAudioDevices() call), SDL_AudioDeviceID for the REMOVED event */
| iscapture : u8    /**< zero if an output device, non-zero if a capture device. */
| padding1 : u8
| padding2 : u8
| padding3 : u8
 -> SDL_AudioDeviceEvent;


/**
 *  \brief Touch finger event structure (event.tfinger.*)
 */
pub struct
| type : u32        /**< ::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| touchId : SDL_TouchID  /**< The touch device id */
| fingerId : SDL_FingerID
| x : f32            /**< Normalized in the range 0...1 */
| y : f32            /**< Normalized in the range 0...1 */
| dx : f32           /**< Normalized in the range -1...1 */
| dy : f32           /**< Normalized in the range -1...1 */
| pressure : f32     /**< Normalized in the range 0...1 */
 -> SDL_TouchFingerEvent;


/**
 *  \brief Multiple Finger Gesture Event (event.mgesture.*)
 */
pub struct 
| type : u32        /**< ::SDL_MULTIGESTURE */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| touchId : SDL_TouchID /**< The touch device id */
| dTheta : f32
| dDist : f32
| x : f32
| y : f32
| numFingers : u16
| padding : u16
 -> SDL_MultiGestureEvent;


/**
 * \brief Dollar Gesture Event (event.dgesture.*)
 */
pub struct
| type : u32        /**< ::SDL_DOLLARGESTURE or ::SDL_DOLLARRECORD */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| touchId : SDL_TouchID /**< The touch device id */
| gestureId : SDL_GestureID 
| numFingers : u32
| error : f32
| x : f32            /**< Normalized center of gesture */
| y : f32            /**< Normalized center of gesture */
-> SDL_DollarGestureEvent;


/**
 *  \brief An event used to request a file open by the system (event.drop.*)
 *         This event is enabled by default, you can disable it with SDL_EventState().
 *  \note If this event is enabled, you must free the filename in the event.
 */
pub struct 
| type : u32        /**< ::SDL_DROPBEGIN or ::SDL_DROPFILE or ::SDL_DROPTEXT or ::SDL_DROPCOMPLETE */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| file : &c8         /**< The file name, which should be freed with SDL_free(), is NULL on begin/complete */
| windowID : u32    /**< The window that was dropped on, if any */
-> SDL_DropEvent;


/**
 *  \brief Sensor event structure (event.sensor.*)
 */
pub struct
| type : u32        /**< ::SDL_SENSORUPDATE */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| which : i32       /**< The instance ID of the sensor */
| data : [f32 ; 6u32]      /**< Up to 6 values from the sensor - additional values can be queried using SDL_SensorGetData() */
-> SDL_SensorEvent;

/**
 *  \brief The "quit requested" event
 */
pub struct
| type : u32        /**< ::SDL_QUIT */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
 -> SDL_QuitEvent;

/**
 *  \brief OS Specific event
 */
pub struct
| type : u32        /**< ::SDL_QUIT */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
 -> SDL_OSEvent;

/**
 *  \brief A user-defined event type (event.user.*)
 */
pub struct 
| type : u32        /**< ::SDL_USEREVENT through ::SDL_LASTEVENT-1 */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| windowID : u32    /**< The associated window if any */
| code : i32        /**< User defined event code */
| data1 : &void        /**< User defined data pointer */
| data2 : &void        /**< User defined data pointer */
-> SDL_UserEvent;


pub struct-> SDL_SysWMmsg;

/**
 *  \brief A video driver dependent system event (event.syswm.*)
 *         This event is disabled by default, you can enable it with SDL_EventState()
 *
 *  \note If you want to use this event, you should include SDL_syswm.h.
 */
pub struct
| type : u32        /**< ::SDL_SYSWMEVENT */
| timestamp : u32   /**< In milliseconds, populated using SDL_GetTicks() */
| msg : &SDL_SysWMmsg  /**< driver dependent data, defined in SDL_syswm.h */
 -> SDL_SysWMEvent;

/**
 *  \brief General event structure
 */
pub struct @{union}
| type : u32                    /**< Event type, shared with all events */
| common : SDL_CommonEvent         /**< Common event data */
| display : SDL_DisplayEvent        /**< Window event data */
| window : SDL_WindowEvent         /**< Window event data */
| key : SDL_KeyboardEvent           /**< Keyboard event data */
| edit : SDL_TextEditingEvent       /**< Text editing event data */
| text : SDL_TextInputEvent         /**< Text input event data */
| motion : SDL_MouseMotionEvent    /**< Mouse motion event data */
| button : SDL_MouseButtonEvent     /**< Mouse button event data */
| wheel : SDL_MouseWheelEvent       /**< Mouse wheel event data */
| jaxis : SDL_JoyAxisEvent          /**< Joystick axis event data */
| jball : SDL_JoyBallEvent          /**< Joystick ball event data */
| jhat : SDL_JoyHatEvent            /**< Joystick hat event data */
| jbutton : SDL_JoyButtonEvent      /**< Joystick button event data */
| jdevice : SDL_JoyDeviceEvent      /**< Joystick device change event data */
| caxis : SDL_ControllerAxisEvent       /**< Game Controller axis event data */
| cbutton : SDL_ControllerButtonEvent   /**< Game Controller button event data */
| cdevice : SDL_ControllerDeviceEvent   /**< Game Controller device event data */
| adevice : SDL_AudioDeviceEvent    /**< Audio device event data */
| sensor : SDL_SensorEvent          /**< Sensor event data */
| quit : SDL_QuitEvent              /**< Quit request event data */
| user : SDL_UserEvent             /**< Custom event data */
| syswm : SDL_SysWMEvent            /**< System dependent window event data */
| tfinger : SDL_TouchFingerEvent    /**< Touch finger event data */
| mgesture : SDL_MultiGestureEvent  /**< Gesture event data */
| dgesture : SDL_DollarGestureEvent  /**< Gesture event data */
| drop : SDL_DropEvent              /**< Drag and drop event data */

/* This is necessary for ABI compatibility between Visual C++ and GCC
    Visual C++ will respect the push pack pragma and use 52 bytes for
    this structure, and GCC will use the alignment of the largest datatype
    within the union, which is 8 bytes.

    So... we'll add padding to force the size to be 56 bytes for both.
 */
| padding : [u8 ; 56u32]
 -> SDL_Event;

/* Make sure we haven't broken binary compatibility */
// cte assert (sizeof (SDL_Event) == 56us);


/* Function prototypes */

/**
 *  Pumps the event loop, gathering events from the input devices.
 *
 *  This function updates the event queue and internal input device state.
 *
 *  This should only be run in the thread that sets the video mode.
 */
pub extern (C) def SDL_PumpEvents();

/* @{ */
pub enum
| SDL_ADDEVENT = 0u32
| SDL_PEEKEVENT = 1u32
| SDL_GETEVENT = 2u32
 -> SDL_eventaction;

/**
 *  Checks the event queue for messages and optionally returns them.
 *
 *  If \c action is ::SDL_ADDEVENT, up to \c numevents events will be added to
 *  the back of the event queue.
 *
 *  If \c action is ::SDL_PEEKEVENT, up to \c numevents events at the front
 *  of the event queue, within the specified minimum and maximum type,
 *  will be returned and will not be removed from the queue.
 *
 *  If \c action is ::SDL_GETEVENT, up to \c numevents events at the front
 *  of the event queue, within the specified minimum and maximum type,
 *  will be returned and will be removed from the queue.
 *
 *  \return The number of events actually stored, or -1 if there was an error.
 *
 *  This function is thread-safe.
 */
pub extern (C) def SDL_PeepEvents(dmut events : &SDL_Event, numevents : i32,
                                           action : SDL_eventaction,
                                           minType : u32, maxType : u32)-> i32;
/* @} */

/**
 *  Checks to see if certain event types are in the event queue.
 */
pub extern (C) def SDL_HasEvent(type : u32)-> bool;
pub extern (C) def SDL_HasEvents(minType : u32, maxType : u32)-> bool;

/**
 *  This function clears events from the event queue
 *  This function only affects currently queued events. If you want to make
 *  sure that all pending OS events are flushed, you can call SDL_PumpEvents()
 *  on the main thread immediately before the flush call.
 */
pub extern (C) def SDL_FlushEvent(type : u32);
pub extern (C) def SDL_FlushEvents(minType : u32, maxType : u32);

/**
 *  \brief Polls for currently pending events.
 *
 *  \return 1 if there are any pending events, or 0 if there are none available.
 *
 *  \param event If not NULL, the next event is removed from the queue and
 *               stored in that area.
 */
pub extern (C) def SDL_PollEvent(dmut event : &SDL_Event)-> i32;

/**
 *  \brief Waits indefinitely for the next available event.
 *
 *  \return 1, or 0 if there was an error while waiting for events.
 *
 *  \param event If not NULL, the next event is removed from the queue and
 *               stored in that area.
 */
pub extern (C) def SDL_WaitEvent(dmut event : &SDL_Event)-> i32;

/**
 *  \brief Waits until the specified timeout (in milliseconds) for the next
 *         available event.
 *
 *  \return 1, or 0 if there was an error while waiting for events.
 *
 *  \param event If not NULL, the next event is removed from the queue and
 *               stored in that area.
 *  \param timeout The timeout (in milliseconds) to wait for next event.
 */
pub extern (C) def SDL_WaitEventTimeout(dmut event : &SDL_Event,
                                        timeout : i32)-> i32;

/**
 *  \brief Add an event to the event queue.
 *
 *  \return 1 on success, 0 if the event was filtered, or -1 if the event queue
 *          was full or there was some other error.
 */
pub extern (C) def SDL_PushEvent(dmut event : &SDL_Event)-> i32;

pub aka SDL_EventFilter = fn (dmut &void, dmut &SDL_Event)-> i32;

/**
 *  Sets up a filter to process all events before they change internal state and
 *  are posted to the internal event queue.
 *
 *  The filter is prototyped as:
 *  \code
 *      int SDL_EventFilter(void *userdata, SDL_Event * event);
 *  \endcode
 *
 *  If the filter returns 1, then the event will be added to the internal queue.
 *  If it returns 0, then the event will be dropped from the queue, but the
 *  internal state will still be updated.  This allows selective filtering of
 *  dynamically arriving events.
 *
 *  \warning  Be very careful of what you do in the event filter function, as
 *            it may run in a different thread!
 *
 *  There is one caveat when dealing with the ::SDL_QuitEvent event type.  The
 *  event filter is only called when the window manager desires to close the
 *  application window.  If the event filter returns 1, then the window will
 *  be closed, otherwise the window will remain open if possible.
 *
 *  If the quit event is generated by an interrupt signal, it will bypass the
 *  internal queue and be delivered to the application at the next event poll.
 */
pub extern (C) def SDL_SetEventFilter(filter : SDL_EventFilter ,
                                      userdata : &void);

/**
 *  Return the current event filter - can be used to "chain" filters.
 *  If there is no event filter set, this function returns SDL_FALSE.
 */
pub extern (C) def SDL_GetEventFilter(dmut filter : &SDL_EventFilter,
                                                    dmut userdata : &(&void))-> bool;

/**
 *  Add a function which is called when an event is added to the queue.
 */
pub extern (C) def SDL_AddEventWatch(filter : SDL_EventFilter,
                                               userdata : &void);

/**
 *  Remove an event watch function added with SDL_AddEventWatch()
 */
pub extern (C) def SDL_DelEventWatch(filter : SDL_EventFilter,
                                     userdata : &void);

/**
 *  Run the filter function on the current event queue, removing any
 *  events for which the filter returns 0.
 */
pub extern (C) def SDL_FilterEvents(filter : SDL_EventFilter,
                                    userdata : &void);

/* @{ */
pub aka SDL_QUERY    = -1
pub aka SDL_IGNORE   = 0
pub aka SDL_DISABLE  = 0
pub aka SDL_ENABLE   = 1

/**
 *  This function allows you to set the state of processing certain events.
 *   - If \c state is set to ::SDL_IGNORE, that event will be automatically
 *     dropped from the event queue and will not be filtered.
 *   - If \c state is set to ::SDL_ENABLE, that event will be processed
 *     normally.
 *   - If \c state is set to ::SDL_QUERY, SDL_EventState() will return the
 *     current processing state of the specified event.
 */
pub extern (C) def SDL_EventState(type : u32, state : i32)-> u8;

/* @} */
pub def SDL_GetEventState (type : u32)-> u8 SDL_EventState(type, SDL_QUERY)

/**
 *  This function allocates a set of user-defined events, and returns
 *  the beginning event number for that set of events.
 *
 *  If there aren't enough user-defined events left, this function
 *  returns (u32)-1
 */
pub extern (C) def SDL_RegisterEvents(numevents : i32)-> u32;
