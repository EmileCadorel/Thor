mod sdl2::joystick;

/**
 *  \file SDL_joystick.h
 *
 *  In order to use these functions, SDL_Init() must have been called
 *  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
 *  for joysticks, and load appropriate drivers.
 *
 *  If you would like to receive joystick updates while the application
 *  is in the background, you should set the following hint before calling
 *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 */

/**
 * The joystick structure used to identify an SDL joystick
 */
pub struct -> SDL_Joystick;


/* A structure that encodes the stable unique id for a joystick device */
pub struct
| data : [u8 ; 16u32]
 -> SDL_JoystickGUID;

/**
 * This is a unique ID for a joystick for the time it is connected to the system,
 * and is never reused for the lifetime of the application. If the joystick is
 * disconnected and reconnected, it will get a new ID.
 *
 * The ID value starts at 0 and increments from there. The value -1 is an invalid ID.
 */
pub aka SDL_JoystickID = i32;

pub enum

| SDL_JOYSTICK_TYPE_UNKNOWN = 0u32
| SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1u32
| SDL_JOYSTICK_TYPE_WHEEL = 2u32
| SDL_JOYSTICK_TYPE_ARCADE_STICK = 3u32
| SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4u32
| SDL_JOYSTICK_TYPE_DANCE_PAD = 5u32
| SDL_JOYSTICK_TYPE_GUITAR = 6u32
| SDL_JOYSTICK_TYPE_DRUM_KIT = 7u32
| SDL_JOYSTICK_TYPE_ARCADE_PAD = 8u32
| SDL_JOYSTICK_TYPE_THROTTLE = 9u32
-> SDL_JoystickType;

pub enum
| SDL_JOYSTICK_POWER_UNKNOWN = -1
| SDL_JOYSTICK_POWER_EMPTY = 0   /* <= 5% */
| SDL_JOYSTICK_POWER_LOW = 1     /* <= 20% */
| SDL_JOYSTICK_POWER_MEDIUM = 2  /* <= 70% */
| SDL_JOYSTICK_POWER_FULL = 3    /* <= 100% */
| SDL_JOYSTICK_POWER_WIRED = 4
| SDL_JOYSTICK_POWER_MAX = 5
 -> SDL_JoystickPowerLevel;

/* Function prototypes */

/**
 * Locking for multi-threaded access to the joystick API
 *
 * If you are using the joystick API or handling events from multiple threads
 * you should use these locking functions to protect access to the joysticks.
 *
 * In particular, you are guaranteed that the joystick list won't change, so
 * the API functions that take a joystick index will be valid, and joystick
 * and game controller events will not be delivered.
 */
pub extern (C) def SDL_LockJoysticks();
pub extern (C) def SDL_UnlockJoysticks();

/**
 *  Count the number of joysticks attached to the system right now
 */
pub extern (C) def SDL_NumJoysticks()-> i32;

/**
 *  Get the implementation dependent name of a joystick.
 *  This can be called before any joysticks are opened.
 *  If no name can be found, this function returns NULL.
 */
pub extern (C) def SDL_JoystickNameForIndex(device_index : i32)-> &c8;

/**
 *  Get the player index of a joystick, or -1 if it's not available
 *  This can be called before any joysticks are opened.
 */
pub extern (C) def SDL_JoystickGetDevicePlayerIndex(device_index : i32)-> i32;

/**
 *  Return the GUID for the joystick at this index
 *  This can be called before any joysticks are opened.
 */
pub extern (C) def SDL_JoystickGetDeviceGUID(device_index : i32)-> SDL_JoystickGUID;

/**
 *  Get the USB vendor ID of a joystick, if available.
 *  This can be called before any joysticks are opened.
 *  If the vendor ID isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetDeviceVendor(device_index : i32)-> u16;

/**
 *  Get the USB product ID of a joystick, if available.
 *  This can be called before any joysticks are opened.
 *  If the product ID isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetDeviceProduct(device_index : i32)-> u16;

/**
 *  Get the product version of a joystick, if available.
 *  This can be called before any joysticks are opened.
 *  If the product version isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetDeviceProductVersion(device_index : i32)-> u16;

/**
 *  Get the type of a joystick, if available.
 *  This can be called before any joysticks are opened.
 */
pub extern (C) def SDL_JoystickGetDeviceType(device_index : i32)-> SDL_JoystickType;

/**
 *  Get the instance ID of a joystick.
 *  This can be called before any joysticks are opened.
 *  If the index is out of range, this function will return -1.
 */
pub extern (C) def SDL_JoystickGetDeviceInstanceID(device_index : i32)-> SDL_JoystickID;

/**
 *  Open a joystick for use.
 *  The index passed as an argument refers to the N'th joystick on the system.
 *  This index is not the value which will identify this joystick in future
 *  joystick events.  The joystick's instance id (::SDL_JoystickID) will be used
 *  there instead.
 *
 *  \return A joystick identifier, or NULL if an error occurred.
 */
pub extern (C) def SDL_JoystickOpen(device_index : i32)-> dmut &SDL_Joystick;

/**
 * Return the SDL_Joystick associated with an instance id.
 */
pub extern (C) def SDL_JoystickFromInstanceID(joyid : SDL_JoystickID)-> dmut &SDL_Joystick;

/**
 *  Return the name for this currently opened joystick.
 *  If no name can be found, this function returns NULL.
 */
pub extern (C) def SDL_JoystickName(joystick : &SDL_Joystick)-> &c8;

/**
 *  Get the player index of an opened joystick, or -1 if it's not available
 *
 *  For XInput controllers this returns the XInput user index.
 */
pub extern (C) def SDL_JoystickGetPlayerIndex(joystick : &SDL_Joystick)-> i32;

/**
 *  Return the GUID for this opened joystick
 */
pub extern (C) def SDL_JoystickGetGUID(joystick : &SDL_Joystick)-> SDL_JoystickGUID;

/**
 *  Get the USB vendor ID of an opened joystick, if available.
 *  If the vendor ID isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetVendor(joystick : &SDL_Joystick)-> u16;

/**
 *  Get the USB product ID of an opened joystick, if available.
 *  If the product ID isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetProduct(joystick : &SDL_Joystick)-> u16;

/**
 *  Get the product version of an opened joystick, if available.
 *  If the product version isn't available this function returns 0.
 */
pub extern (C) def SDL_JoystickGetProductVersion(joystick : &SDL_Joystick)-> u16;

/**
 *  Get the type of an opened joystick.
 */
pub extern (C) def SDL_JoystickGetType(joystick : &SDL_Joystick)-> SDL_JoystickType;

/**
 *  Return a string representation for this guid. pszGUID must point to at least 33 bytes
 *  (32 for the string plus a NULL terminator).
 */
pub extern (C) def SDL_JoystickGetGUIDString(guid : SDL_JoystickGUID, dmut pszGUID : &c8, cbGUID : i32);

/**
 *  Convert a string into a joystick guid
 */
pub extern (C) def SDL_JoystickGetGUIDFromString(pchGUID : &c8)-> SDL_JoystickGUID;

/**
 *  Returns SDL_TRUE if the joystick has been opened and currently connected, or SDL_FALSE if it has not.
 */
pub extern (C) def SDL_JoystickGetAttached(joystick : &SDL_Joystick)-> bool;

/**
 *  Get the instance ID of an opened joystick or -1 if the joystick is invalid.
 */
pub extern (C) def SDL_JoystickInstanceID(joystick : &SDL_Joystick)-> SDL_JoystickID;

/**
 *  Get the number of general axis controls on a joystick.
 */
pub extern (C) def SDL_JoystickNumAxes(joystick : &SDL_Joystick)-> i32;

/**
 *  Get the number of trackballs on a joystick.
 *
 *  Joystick trackballs have only relative motion events associated
 *  with them and their state cannot be polled.
 */
pub extern (C) def SDL_JoystickNumBalls(joystick : &SDL_Joystick)-> i32;

/**
 *  Get the number of POV hats on a joystick.
 */
pub extern (C) def SDL_JoystickNumHats(joystick : &SDL_Joystick)-> i32;

/**
 *  Get the number of buttons on a joystick.
 */
pub extern (C) def SDL_JoystickNumButtons(joystick : &SDL_Joystick)-> i32;

/**
 *  Update the current state of the open joysticks.
 *
 *  This is called automatically by the event loop if any joystick
 *  events are enabled.
 */
pub extern (C) def SDL_JoystickUpdate();

/**
 *  Enable/disable joystick event polling.
 *
 *  If joystick events are disabled, you must call SDL_JoystickUpdate()
 *  yourself and check the state of the joystick when you want joystick
 *  information.
 *
 *  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
 */
pub extern (C) def SDL_JoystickEventState(state : i32)-> i32;

pub aka SDL_JOYSTICK_AXIS_MAX   = 32767
pub aka SDL_JOYSTICK_AXIS_MIN   = -32768
/**
 *  Get the current state of an axis control on a joystick.
 *
 *  The state is a value ranging from -32768 to 32767.
 *
 *  The axis indices start at index 0.
 */
pub extern (C) def SDL_JoystickGetAxis(joystick : &SDL_Joystick,
                                       axis : i32)-> i16;

/**
 *  Get the initial state of an axis control on a joystick.
 *
 *  The state is a value ranging from -32768 to 32767.
 *
 *  The axis indices start at index 0.
 *
 *  \return SDL_TRUE if this axis has any initial value, or SDL_FALSE if not.
 */
pub extern (C) def SDL_JoystickGetAxisInitialState(joystick : &SDL_Joystick,
                                                   axis : i32, state : &i32)-> bool;

/**
 *  \name Hat positions
 */
/* @{ */
pub aka  SDL_HAT_CENTERED    = 0x00u32
pub aka  SDL_HAT_UP          = 0x01u32
pub aka  SDL_HAT_RIGHT       = 0x02u32
pub aka  SDL_HAT_DOWN        = 0x04u32
pub aka  SDL_HAT_LEFT        = 0x08u32
pub aka  SDL_HAT_RIGHTUP     = (SDL_HAT_RIGHT|SDL_HAT_UP)
pub aka  SDL_HAT_RIGHTDOWN   = (SDL_HAT_RIGHT|SDL_HAT_DOWN)
pub aka  SDL_HAT_LEFTUP      = (SDL_HAT_LEFT|SDL_HAT_UP)
pub aka  SDL_HAT_LEFTDOWN    = (SDL_HAT_LEFT|SDL_HAT_DOWN)
/* @} */

/**
 *  Get the current state of a POV hat on a joystick.
 *
 *  The hat indices start at index 0.
 *
 *  \return The return value is one of the following positions:
 *           - ::SDL_HAT_CENTERED
 *           - ::SDL_HAT_UP
 *           - ::SDL_HAT_RIGHT
 *           - ::SDL_HAT_DOWN
 *           - ::SDL_HAT_LEFT
 *           - ::SDL_HAT_RIGHTUP
 *           - ::SDL_HAT_RIGHTDOWN
 *           - ::SDL_HAT_LEFTUP
 *           - ::SDL_HAT_LEFTDOWN
 */
pub extern (C) def SDL_JoystickGetHat(joystick : &SDL_Joystick,
                                      hat : i32)-> u8;

/**
 *  Get the ball axis change since the last poll.
 *
 *  \return 0, or -1 if you passed it invalid parameters.
 *
 *  The ball indices start at index 0.
 */
pub extern (C) def SDL_JoystickGetBall(joystick : &SDL_Joystick,
                                       ball : i32, dmut dx : &i32, dmut dy : &i32)-> i32;

/**
 *  Get the current state of a button on a joystick.
 *
 *  The button indices start at index 0.
 */
pub extern (C) def SDL_JoystickGetButton(joystick : &SDL_Joystick,
                                         button : i32)-> u8;

/**
 *  Trigger a rumble effect
 *  Each call to this function cancels any previous rumble effect, and calling it with 0 intensity stops any rumbling.
 *
 *  \param joystick The joystick to vibrate
 *  \param low_frequency_rumble The intensity of the low frequency (left) rumble motor, from 0 to 0xFFFF
 *  \param high_frequency_rumble The intensity of the high frequency (right) rumble motor, from 0 to 0xFFFF
 *  \param duration_ms The duration of the rumble effect, in milliseconds
 *
 *  \return 0, or -1 if rumble isn't supported on this joystick
 */
pub extern (C) def SDL_JoystickRumble(joystick : &SDL_Joystick, low_frequency_rumble : u16, high_frequency_rumble : u16, duration_ms : u32)-> i32;

/**
 *  Close a joystick previously opened with SDL_JoystickOpen().
 */
pub extern (C) def SDL_JoystickClose(dmut joystick : &SDL_Joystick);

/**
 *  Return the battery level of this joystick
 */
pub extern (C) def SDL_JoystickCurrentPowerLevel(joystick : &SDL_Joystick)-> SDL_JoystickPowerLevel;
