mod sdl2::mouse;
import sdl2::video, sdl2::surface;

pub struct -> SDL_Cursor;   /**< Implementation dependent */

/**
 * \brief Cursor types for SDL_CreateSystemCursor().
 */
pub enum
| SDL_SYSTEM_CURSOR_ARROW = 0u32     /**< Arrow */
| SDL_SYSTEM_CURSOR_IBEAM = 1u32     /**< I-beam */
| SDL_SYSTEM_CURSOR_WAIT = 2u32      /**< Wait */
| SDL_SYSTEM_CURSOR_CROSSHAIR = 3u32 /**< Crosshair */
| SDL_SYSTEM_CURSOR_WAITARROW = 4u32 /**< Small wait cursor (or Wait if not available) */
| SDL_SYSTEM_CURSOR_SIZENWSE = 5u32  /**< Double arrow pointing northwest and southeast */
| SDL_SYSTEM_CURSOR_SIZENESW = 6u32  /**< Double arrow pointing northeast and southwest */
| SDL_SYSTEM_CURSOR_SIZEWE = 7u32    /**< Double arrow pointing west and east */
| SDL_SYSTEM_CURSOR_SIZENS = 8u32    /**< Double arrow pointing north and south */
| SDL_SYSTEM_CURSOR_SIZEALL = 9u32   /**< Four pointed arrow pointing north, south, east, and west */
| SDL_SYSTEM_CURSOR_NO = 10u32        /**< Slashed circle or crossbones */
| SDL_SYSTEM_CURSOR_HAND = 11u32      /**< Hand */
| SDL_NUM_SYSTEM_CURSORS = 12u32
 -> SDL_SystemCursor;

/**
 * \brief Scroll direction types for the Scroll event
 */
pub enum
| SDL_MOUSEWHEEL_NORMAL = 0u32    /**< The scroll direction is normal */
| SDL_MOUSEWHEEL_FLIPPED = 1u32    /**< The scroll direction is flipped / natural */
 -> SDL_MouseWheelDirection;

/* Function prototypes */

/**
 *  \brief Get the window which currently has mouse focus.
 */
pub extern (C) def SDL_GetMouseFocus ()-> &SDL_Window;

/**
 *  \brief Retrieve the current state of the mouse.
 *
 *  The current button state is returned as a button bitmask, which can
 *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
 *  mouse cursor position relative to the focus window for the currently
 *  selected mouse.  You can pass NULL for either x or y.
 */
pub extern (C) def SDL_GetMouseState(dmut x : &i32, dmut y : &i32)-> u32;

/**
 *  \brief Get the current state of the mouse, in relation to the desktop
 *
 *  This works just like SDL_GetMouseState(), but the coordinates will be
 *  reported relative to the top-left of the desktop. This can be useful if
 *  you need to track the mouse outside of a specific window and
 *  SDL_CaptureMouse() doesn't fit your needs. For example, it could be
 *  useful if you need to track the mouse while dragging a window, where
 *  coordinates relative to a window might not be in sync at all times.
 *
 *  \note SDL_GetMouseState() returns the mouse position as SDL understands
 *        it from the last pump of the event queue. This function, however,
 *        queries the OS for the current mouse position, and as such, might
 *        be a slightly less efficient function. Unless you know what you're
 *        doing and have a good reason to use this function, you probably want
 *        SDL_GetMouseState() instead.
 *
 *  \param x Returns the current X coord, relative to the desktop. Can be NULL.
 *  \param y Returns the current Y coord, relative to the desktop. Can be NULL.
 *  \return The current button state as a bitmask, which can be tested using the SDL_BUTTON(X) macros.
 *
 *  \sa SDL_GetMouseState
 */
pub extern (C) def SDL_GetGlobalMouseState(dmut x : &i32, dmut y : &i32)-> u32;

/**
 *  \brief Retrieve the relative state of the mouse.
 *
 *  The current button state is returned as a button bitmask, which can
 *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
 *  mouse deltas since the last call to SDL_GetRelativeMouseState().
 */
pub extern (C) def SDL_GetRelativeMouseState(dmut x : &i32, dmut y : &i32)-> u32;

/**
 *  \brief Moves the mouse to the given position within the window.
 *
 *  \param window The window to move the mouse into, or NULL for the current mouse focus
 *  \param x The x coordinate within the window
 *  \param y The y coordinate within the window
 *
 *  \note This function generates a mouse motion event
 */
pub extern (C) def SDL_WarpMouseInWindow(dmut window : &SDL_Window,
                                         x : i32, y : i32);

/**
 *  \brief Moves the mouse to the given position in global screen space.
 *
 *  \param x The x coordinate
 *  \param y The y coordinate
 *  \return 0 on success, -1 on error (usually: unsupported by a platform).
 *
 *  \note This function generates a mouse motion event
 */
pub extern (C) def SDL_WarpMouseGlobal(x : i32, y : i32)-> i32;

/**
 *  \brief Set relative mouse mode.
 *
 *  \param enabled Whether or not to enable relative mode
 *
 *  \return 0 on success, or -1 if relative mode is not supported.
 *
 *  While the mouse is in relative mode, the cursor is hidden, and the
 *  driver will try to report continuous motion in the current window.
 *  Only relative motion events will be delivered, the mouse position
 *  will not change.
 *
 *  \note This function will flush any pending mouse motion.
 *
 *  \sa SDL_GetRelativeMouseMode()
 */
pub extern (C) def SDL_SetRelativeMouseMode(enabled : bool)-> i32;

/**
 *  \brief Capture the mouse, to track input outside an SDL window.
 *
 *  \param enabled Whether or not to enable capturing
 *
 *  Capturing enables your app to obtain mouse events globally, instead of
 *  just within your window. Not all video targets support this function.
 *  When capturing is enabled, the current window will get all mouse events,
 *  but unlike relative mode, no change is made to the cursor and it is
 *  not restrained to your window.
 *
 *  This function may also deny mouse input to other windows--both those in
 *  your application and others on the system--so you should use this
 *  function sparingly, and in small bursts. For example, you might want to
 *  track the mouse while the user is dragging something, until the user
 *  releases a mouse button. It is not recommended that you capture the mouse
 *  for long periods of time, such as the entire time your app is running.
 *
 *  While captured, mouse events still report coordinates relative to the
 *  current (foreground) window, but those coordinates may be outside the
 *  bounds of the window (including negative values). Capturing is only
 *  allowed for the foreground window. If the window loses focus while
 *  capturing, the capture will be disabled automatically.
 *
 *  While capturing is enabled, the current window will have the
 *  SDL_WINDOW_MOUSE_CAPTURE flag set.
 *
 *  \return 0 on success, or -1 if not supported.
 */
pub extern (C) def SDL_CaptureMouse(enabled : bool)-> i32;

/**
 *  \brief Query whether relative mouse mode is enabled.
 *
 *  \sa SDL_SetRelativeMouseMode()
 */
pub extern (C) def SDL_GetRelativeMouseMode()-> bool;

/**
 *  \brief Create a cursor, using the specified bitmap data and
 *         mask (in MSB format).
 *
 *  The cursor width must be a multiple of 8 bits.
 *
 *  The cursor is created in black and white according to the following:
 *  <table>
 *  <tr><td> data </td><td> mask </td><td> resulting pixel on screen </td></tr>
 *  <tr><td>  0   </td><td>  1   </td><td> White </td></tr>
 *  <tr><td>  1   </td><td>  1   </td><td> Black </td></tr>
 *  <tr><td>  0   </td><td>  0   </td><td> Transparent </td></tr>
 *  <tr><td>  1   </td><td>  0   </td><td> Inverted color if possible, black
 *                                         if not. </td></tr>
 *  </table>
 *
 *  \sa SDL_FreeCursor()
 */
pub extern (C) def SDL_CreateCursor(data : &u8,
                                    mask : &u8,
                                    w : i32, h : i32, hot_x : i32,
                                    hot_y : i32)-> &SDL_Cursor;

/**
 *  \brief Create a color cursor.
 *
 *  \sa SDL_FreeCursor()
 */
pub extern (C) def SDL_CreateColorCursor(dmut surface : &SDL_Surface,
                                         hot_x : i32,
                                         hot_y : i32)->  &SDL_Cursor;

/**
 *  \brief Create a system cursor.
 *
 *  \sa SDL_FreeCursor()
 */
pub extern (C) def SDL_CreateSystemCursor(id : SDL_SystemCursor)-> &SDL_Cursor;

/**
 *  \brief Set the active cursor.
 */
pub extern (C) def SDL_SetCursor(cursor : &SDL_Cursor);

/**
 *  \brief Return the active cursor.
 */
pub extern (C) def SDL_GetCursor()-> &SDL_Cursor;

/**
 *  \brief Return the default cursor.
 */
pub extern (C) def SDL_GetDefaultCursor()-> &SDL_Cursor;

/**
 *  \brief Frees a cursor created with SDL_CreateCursor() or similar functions.
 *
 *  \sa SDL_CreateCursor()
 *  \sa SDL_CreateColorCursor()
 *  \sa SDL_CreateSystemCursor()
 */
pub extern (C) def SDL_FreeCursor(dmut cursor : &SDL_Cursor);

/**
 *  \brief Toggle whether or not the cursor is shown.
 *
 *  \param toggle 1 to show the cursor, 0 to hide it, -1 to query the current
 *                state.
 *
 *  \return 1 if the cursor is shown, or 0 if the cursor is hidden.
 */
pub extern (C) def SDL_ShowCursor(toggle : i32)-> i32;

/**
 *  Used as a mask when testing buttons in buttonstate.
 *   - Button 1:  Left mouse button
 *   - Button 2:  Middle mouse button
 *   - Button 3:  Right mouse button
 */
pub def SDL_BUTTON (X : u32)-> u32 {       (1u32 << ((X)-1u32)) }

pub aka SDL_BUTTON_LEFT     = 1u32
pub aka SDL_BUTTON_MIDDLE   = 2u32
pub aka SDL_BUTTON_RIGHT    = 3u32
pub aka SDL_BUTTON_X1       = 4u32
pub aka SDL_BUTTON_X2       = 5u32

pub aka  SDL_BUTTON_LMASK    = SDL_BUTTON(SDL_BUTTON_LEFT)
pub aka  SDL_BUTTON_MMASK    = SDL_BUTTON(SDL_BUTTON_MIDDLE)
pub aka  SDL_BUTTON_RMASK    = SDL_BUTTON(SDL_BUTTON_RIGHT)
pub aka  SDL_BUTTON_X1MASK   = SDL_BUTTON(SDL_BUTTON_X1)
pub aka  SDL_BUTTON_X2MASK   = SDL_BUTTON(SDL_BUTTON_X2)

