mod sdl2::version;

pub struct
| major : u8
| minor : u8
| path : u8
 -> SDL_version;


/* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
*/
pub aka SDL_MAJOR_VERSION   = 2u8
pub aka SDL_MINOR_VERSION   = 0u8
pub aka SDL_PATCHLEVEL      = 10u8

/**
 *  \brief Macro to determine SDL version program was compiled against.
 *
 *  This macro fills in a SDL_version structure with the version of the
 *  library you compiled against. This is determined by what header the
 *  compiler uses. Note that if you dynamically linked the library, you might
 *  have a slightly newer or older version at runtime. That version can be
 *  determined with SDL_GetVersion(), which, unlike SDL_VERSION(),
 *  is not a macro.
 *
 *  \param x A pointer to a SDL_version struct to initialize.
 *
 *  \sa SDL_version
 *  \sa SDL_GetVersion
 */
pub def SDL_VERSION ()-> SDL_version {                          
    SDL_version (SDL_MAJOR_VERSION,                
                 SDL_MINOR_VERSION,
                 SDL_PATCHLEVEL)                 
}

/**
 *  This macro turns the version numbers into a numeric value:
 *  \verbatim
    (1,2,3) -> (1203)
    \endverbatim
 *
 *  This assumes that there will never be more than 100 patchlevels.
 */
pub def SDL_VERSIONNUM(X : u8, Y : u8, Z : u8)-> u32 {
    (cast!u32 (X)*1000u32 + cast!u32(Y)*100u32 + cast!u32(Z))
}

/**
 *  This is the version number macro for the current SDL version.
 */
pub aka SDL_COMPILEDVERSION = 
    SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)

/**
 *  This macro will evaluate to true if compiled with SDL at least X.Y.Z.
 */
pub def SDL_VERSION_ATLEAST(X : u8, Y : u8, Z : u8)-> bool {
    (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z))
}

/**
 *  \brief Get the version of SDL that is linked against your program.
 *
 *  If you are linking to SDL dynamically, then it is possible that the
 *  current version will be different than the version you compiled against.
 *  This function returns the current version, while SDL_VERSION() is a
 *  macro that tells you what version you compiled with.
 *
 *  \code
 *  SDL_version compiled;
 *  SDL_version linked;
 *
 *  SDL_VERSION(&compiled);
 *  SDL_GetVersion(&linked);
 *  printf("We compiled against SDL version %d.%d.%d ...\n",
 *         compiled.major, compiled.minor, compiled.patch);
 *  printf("But we linked against SDL version %d.%d.%d.\n",
 *         linked.major, linked.minor, linked.patch);
 *  \endcode
 *
 *  This function may be called safely at any time, even before SDL_Init().
 *
 *  \sa SDL_VERSION
 */
pub extern (C) def SDL_GetVersion(dmut ver : &SDL_version);

/**
 *  \brief Get the code revision of SDL that is linked against your program.
 *
 *  Returns an arbitrary string (a hash value) uniquely identifying the
 *  exact revision of the SDL library in use, and is only useful in comparing
 *  against other revisions. It is NOT an incrementing number.
 */
pub extern (C) def SDL_GetRevision()-> &c8;

/**
 *  \brief Get the revision number of SDL that is linked against your program.
 *
 *  Returns a number uniquely identifying the exact revision of the SDL
 *  library in use. It is an incrementing number based on commits to
 *  hg.libsdl.org.
 */
pub extern (C) def SDL_GetRevisionNumber()-> u32;
