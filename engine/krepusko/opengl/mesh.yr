mod krepusko::opengl::mesh;
import krepusko::opengl::vertex, krepusko::opengl::shader;
import krepusko::math::vector;
import krepusko::opengl::buffers;
import sdl2::opengl, sdl2::opengl_ext;

/**
 * A non indexed mesh that contains a buffers, and can be drawn using a shader
 */
pub class Mesh {V of Vertex!{U}, U...} {

    let dmut _vao = VertexArrayObject::new ();

    let dmut _vbo = VertexBufferObject!{V}::new ();

    /**
     * Create an empty mesh containing nothing
     */
    pub self () {}

    /**
     * Create a mesh from a list of points (assumed to be triangles)
     */
    pub self (verts : [V]) {
        self._vao:.generate ();
        self._vbo:.generate ();

        self._vbo:.setLocalVertices (verts);
        
        self._vao.bind ();
        self._vbo.bind ();
        self._vbo:.uploadAndClearLocal ();

        self._vao.unbind ();
        self._vbo.unbind ();        
    }

    /**
     * Draw the mesh using a shader
     */    
    pub def draw (self, shader : &Shader) {
        self._vao.bind ();
        self._vbo.bind ();

        shader.bindAttributes (sizeof (V));
        glDrawArrays (GL_TRIANGLES, 0, cast!i32 (self._vbo.getSize ()));
        shader.unbindAttributes ();

        self._vbo.unbind ();
        self._vao.unbind ();
    }


    impl Disposable {

        /**
         * Clear the vao and vbos
         */
        pub over dispose (mut self) {
            self._vao:.dispose ();
            self._vbo:.dispose ();
        }        
    }

    __dtor (mut self) {
        self:.dispose ();
    }    
}

/**
 * Create a simple mesh containing a quad (two right triangles, with common hypothenus) 
 * @params: 
 *  - w: the width of the mesh (along x coordinates)
 *  - h: the height of the mesh (along y coordinates)
 */
pub def createQuadMesh (w : f32, h : f32) -> dmut &Mesh!{Vertex!{vec3}} {
    return Mesh::new (
        [Vertex!{vec3} (vec3 (-h, -w, 0.0f)),
         Vertex!{vec3} (vec3 (h, -w, 0.0f)),
         Vertex!{vec3} (vec3 (-h, w, 0.0f)),

         Vertex!{vec3} (vec3 (h, w, 0.0f)),
         Vertex!{vec3} (vec3 (h, -w, 0.0f)),
         Vertex!{vec3} (vec3 (-h, w, 0.0f))]
        );
}

/**
 * Create a simple mesh containing a quad (two right triangles, with common hypothenus) 
 * This quad also contains texture coordinates
 * @params: 
 *  - w: the width of the mesh (along x coordinates)
 *  - h: the height of the mesh (along y coordinates)
 */
pub def createQuadTexMesh (w : f32, h : f32) -> dmut &Mesh!{Vertex!{vec3, vec2}} {
    return Mesh::new (
        [makeVertex (vec3 (-h, -w, 0.0f), vec2 (0.0f, 1.0f)),
         makeVertex (vec3 (h, -w, 0.0f), vec2 (1.0f, 1.0f)),
         makeVertex(vec3 (-h, w, 0.0f), vec2 (0.0f, 0.0f)),
         
         makeVertex(vec3 (h, w, 0.0f), vec2 (1.0f, 0.0f)),
         makeVertex(vec3 (h, -w, 0.0f), vec2 (1.0f, 1.0f)),
         makeVertex(vec3 (-h, w, 0.0f), vec2 (0.0f, 0.0f))]
        );
    
}

/**
 * Create a simple mesh containing a triangle 
 * @params: 
 *  - w: the width of the mesh (along x coordinates), width of the bottom edge of the triangle
 *  - h: the height of the mesh (along y coordinates), height of the triangle from bottom edge to top corner
 */
pub def createTriangleMesh (size : f32) -> dmut &Mesh!{Vertex!{vec3}} {
    return Mesh::new (
        [Vertex!{vec3} (vec3 (-size, -size, 0.0f)),
         Vertex!{vec3} (vec3 (size, -size, 0.0f)),
         Vertex!{vec3} (vec3 (0.0f, size, 0.0f))]
        );
}
