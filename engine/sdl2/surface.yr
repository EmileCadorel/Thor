mod sdl2::surface;
import sdl2::pixels;
import sdl2::rect;
import sdl2::rwops;

pub struct
| flags : u32
| format : &SDL_PixelFormat
| w : i32
| h : i32
| pitch : i32
| pixels : &void
| userdata : &void
| locked : i32
| lock_data : &void
| clip_rect : SDL_Rect
| map : &void
| refcount : i32
 -> SDL_Surface;




/**
 * \brief The type of function used for surface blitting functions.
 */
pub aka SDL_blit = fn (&SDL_Surface, &SDL_Rect, dmut &SDL_Surface, dmut &SDL_Rect)-> i32;

/**
 * \brief The formula used for converting between YUV and RGB
 */

pub aka SDL_YUV_CONVERSION_JPEG = 0u32;        /**< Full range JPEG */
pub aka SDL_YUV_CONVERSION_BT601 = 1u32;       /**< BT.601 (the default) */
pub aka SDL_YUV_CONVERSION_BT709 = 2u32;       /**< BT.709 */
pub aka SDL_YUV_CONVERSION_AUTOMATIC = 3u32;    /**< BT.601 for SD content, BT.709 for HD content */
pub aka SDL_YUV_CONVERSION_MODE = u32;

/**
 *  Allocate and free an RGB surface.
 *
 *  If the depth is 4 or 8 bits, an empty palette is allocated for the surface.
 *  If the depth is greater than 8 bits, the pixel format is set using the
 *  flags '[RGB]mask'.
 *
 *  If the function runs out of memory, it will return NULL.
 *
 *  \param flags The \c flags are obsolete and should be set to 0.
 *  \param width The width in pixels of the surface to create.
 *  \param height The height in pixels of the surface to create.
 *  \param depth The depth in bits of the surface to create.
 *  \param Rmask The red mask of the surface to create.
 *  \param Gmask The green mask of the surface to create.
 *  \param Bmask The blue mask of the surface to create.
 *  \param Amask The alpha mask of the surface to create.
 */
pub extern (C) def SDL_CreateRGBSurface
    (flags : u32, width : i32, height : i32, depth : i32,
     Rmask : i32, Gmask : i32, Bmask : i32, Amask : i32)-> dmut &SDL_Surface;

/* !!! FIXME for 2.1: why does this ask for depth? Format provides that. */
pub extern (C) def SDL_CreateRGBSurfaceWithFormat
    (flags : u32, width : i32, height : i32, depth : i32, format : u32)-> dmut &SDL_Surface;

pub extern (C) def SDL_CreateRGBSurfaceFrom(pixels : &void,
                                            width : i32,
                                            height : i32,
                                            depth : i32,
                                            pitch : i32,
                                            Rmask : u32,
                                            Gmask : u32,
                                            Bmask : u32,
                                            Amask : u32)-> dmut &SDL_Surface;

pub extern (C) def SDL_CreateRGBSurfaceWithFormatFrom
    (pixels : &void, width : i32, height : i32, depth : i32, pitch : i32, format : u32)-> dmut &SDL_Surface;

pub extern (C) def SDL_FreeSurface(dmut surface : &SDL_Surface);

/**
 *  \brief Set the palette used by a surface.
 *
 *  \return 0, or -1 if the surface format doesn't use a palette.
 *
 *  \note A single palette can be shared with many surfaces.
 */
pub extern (C) def SDL_SetSurfacePalette(dmut surface : &SDL_Surface,
                                         dmut palette : &SDL_Palette)-> i32;

/**
 *  \brief Sets up a surface for directly accessing the pixels.
 *
 *  Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write
 *  to and read from \c surface->pixels, using the pixel format stored in
 *  \c surface->format.  Once you are done accessing the surface, you should
 *  use SDL_UnlockSurface() to release it.
 *
 *  Not all surfaces require locking.  If SDL_MUSTLOCK(surface) evaluates
 *  to 0, then you can read and write to the surface at any time, and the
 *  pixel format of the surface will not change.
 *
 *  No operating system or library calls should be made between lock/unlock
 *  pairs, as critical system locks may be held during this time.
 *
 *  SDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.
 *
 *  \sa SDL_UnlockSurface()
 */
pub extern (C) def SDL_LockSurface(dmut surface : &SDL_Surface)-> i32;

/** \sa SDL_LockSurface() */
pub extern (C) def SDL_UnlockSurface(dmut surface : &SDL_Surface);

/**
 *  Load a surface from a seekable SDL data stream (memory or file).
 *
 *  If \c freesrc is non-zero, the stream will be closed after being read.
 *
 *  The new surface should be freed with SDL_FreeSurface().
 *
 *  \return the new surface, or NULL if there was an error.
 */
pub extern (C) def SDL_LoadBMP_RW(src : &SDL_RWops,
                                  freesrc : i32)-> dmut &SDL_Surface;

/**
 *  Load a surface from a file.
 *
 *  Convenience macro.
 */
pub def SDL_LoadBMP(file : &c8)-> dmut &SDL_Surface {
    alias SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"s8.ptr), 1)
}

/**
 *  Save a surface to a seekable SDL data stream (memory or file).
 *
 *  Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
 *  BMP directly. Other RGB formats with 8-bit or higher get converted to a
 *  24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
 *  surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
 *  not supported.
 *
 *  If \c freedst is non-zero, the stream will be closed after being written.
 *
 *  \return 0 if successful or -1 if there was an error.
 */
pub extern (C) def SDL_SaveBMP_RW
    (surface : &SDL_Surface, dmut dst : &SDL_RWops, freedst : i32)-> i32;

/**
 *  Save a surface to a file.
 *
 *  Convenience macro.
 */
pub def SDL_SaveBMP(surface : &SDL_Surface, file : &c8)-> i32 {
    SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"s8.ptr), 1)
}

/**
 *  \brief Sets the RLE acceleration hint for a surface.
 *
 *  \return 0 on success, or -1 if the surface is not valid
 *
 *  \note If RLE is enabled, colorkey and alpha blending blits are much faster,
 *        but the surface must be locked before directly accessing the pixels.
 */
pub extern (C) def SDL_SetSurfaceRLE(dmut surface : &SDL_Surface,
                                     flag : i32)-> i32;

/**
 *  \brief Sets the color key (transparent pixel) in a blittable surface.
 *
 *  \param surface The surface to update
 *  \param flag Non-zero to enable colorkey and 0 to disable colorkey
 *  \param key The transparent pixel in the native surface format
 *
 *  \return 0 on success, or -1 if the surface is not valid
 *
 *  You can pass SDL_RLEACCEL to enable RLE accelerated blits.
 */
pub extern (C) def SDL_SetColorKey(dmut surface : &SDL_Surface,
                                   flag : i32, key : u32)-> i32;

/**
 *  \brief Returns whether the surface has a color key
 *
 *  \return SDL_TRUE if the surface has a color key, or SDL_FALSE if the surface is NULL or has no color key
 */
pub extern (C) def SDL_HasColorKey(surface : &SDL_Surface)-> bool;

/**
 *  \brief Gets the color key (transparent pixel) in a blittable surface.
 *
 *  \param surface The surface to update
 *  \param key A pointer filled in with the transparent pixel in the native
 *             surface format
 *
 *  \return 0 on success, or -1 if the surface is not valid or colorkey is not
 *          enabled.
 */
pub extern (C) def SDL_GetColorKey(surface : &SDL_Surface,
                                   dmut key : &u32)-> i32;

/**
 *  \brief Set an additional color value used in blit operations.
 *
 *  \param surface The surface to update.
 *  \param r The red color value multiplied into blit operations.
 *  \param g The green color value multiplied into blit operations.
 *  \param b The blue color value multiplied into blit operations.
 *
 *  \return 0 on success, or -1 if the surface is not valid.
 *
 *  \sa SDL_GetSurfaceColorMod()
 */
pub extern (C) def SDL_SetSurfaceColorMod(dmut surface : &SDL_Surface,
                                          r : u8, g : u8, b : u8);


/**
 *  \brief Get the additional color value used in blit operations.
 *
 *  \param surface The surface to query.
 *  \param r A pointer filled in with the current red color value.
 *  \param g A pointer filled in with the current green color value.
 *  \param b A pointer filled in with the current blue color value.
 *
 *  \return 0 on success, or -1 if the surface is not valid.
 *
 *  \sa SDL_SetSurfaceColorMod()
 */
pub extern (C) def SDL_GetSurfaceColorMod(surface : &SDL_Surface,
                                          dmut r : &u8, dmut g : &u8,
                                          dmut b : &u8)-> i32;

/**
 *  \brief Set an additional alpha value used in blit operations.
 *
 *  \param surface The surface to update.
 *  \param alpha The alpha value multiplied into blit operations.
 *
 *  \return 0 on success, or -1 if the surface is not valid.
 *
 *  \sa SDL_GetSurfaceAlphaMod()
 */
pub extern (C) def SDL_SetSurfaceAlphaMod(dmut surface : &SDL_Surface,
                                          alpha : u8)-> i32;

/**
 *  \brief Get the additional alpha value used in blit operations.
 *
 *  \param surface The surface to query.
 *  \param alpha A pointer filled in with the current alpha value.
 *
 *  \return 0 on success, or -1 if the surface is not valid.
 *
 *  \sa SDL_SetSurfaceAlphaMod()
 */
pub extern (C) def SDL_GetSurfaceAlphaMod(surface : &SDL_Surface,
                                          dmut alpha : &u8);

/**
 *  \brief Set the blend mode used for blit operations.
 *
 *  \param surface The surface to update.
 *  \param blendMode ::SDL_BlendMode to use for blit blending.
 *
 *  \return 0 on success, or -1 if the parameters are not valid.
 *
 *  \sa SDL_GetSurfaceBlendMode()
 */
pub extern (C) def SDL_SetSurfaceBlendMode(dmut surface : &SDL_Surface,
                                           blendMode : u32)-> i32;

/**
 *  \brief Get the blend mode used for blit operations.
 *
 *  \param surface   The surface to query.
 *  \param blendMode A pointer filled in with the current blend mode.
 *
 *  \return 0 on success, or -1 if the surface is not valid.
 *
 *  \sa SDL_SetSurfaceBlendMode()
 */
pub extern (C) def SDL_GetSurfaceBlendMode(surface : &SDL_Surface ,
                                           dmut blendMode : &u32);

/**
 *  Sets the clipping rectangle for the destination surface in a blit.
 *
 *  If the clip rectangle is NULL, clipping will be disabled.
 *
 *  If the clip rectangle doesn't intersect the surface, the function will
 *  return SDL_FALSE and blits will be completely clipped.  Otherwise the
 *  function returns SDL_TRUE and blits to the surface will be clipped to
 *  the intersection of the surface area and the clipping rectangle.
 *
 *  Note that blits are automatically clipped to the edges of the source
 *  and destination surfaces.
 */
pub extern (C) def SDL_SetClipRect(dmut surface : &SDL_Surface,
                                   rect : &SDL_Rect)-> bool;

/**
 *  Gets the clipping rectangle for the destination surface in a blit.
 *
 *  \c rect must be a pointer to a valid rectangle which will be filled
 *  with the correct values.
 */
pub extern (C) def SDL_GetClipRect(surface : &SDL_Surface,
                                   dmut rect : &SDL_Rect);

/*
 * Creates a new surface identical to the existing surface
 */
pub extern (C) def SDL_DuplicateSurface(surface : &SDL_Surface)-> dmut &SDL_Surface;

/**
 *  Creates a new surface of the specified format, and then copies and maps
 *  the given surface to it so the blit of the converted surface will be as
 *  fast as possible.  If this function fails, it returns NULL.
 *
 *  The \c flags parameter is passed to SDL_CreateRGBSurface() and has those
 *  semantics.  You can also pass ::SDL_RLEACCEL in the flags parameter and
 *  SDL will try to RLE accelerate colorkey and alpha blits in the resulting
 *  surface.
 */
pub extern (C) def SDL_ConvertSurface
    (src : &SDL_Surface, fmt : &SDL_PixelFormat, flags : u32)-> dmut &SDL_Surface;

pub extern (C) def SDL_ConvertSurfaceFormat
    (src : &SDL_Surface, pixel_format : u32, flags : u32)-> &SDL_Surface;

/**
 * \brief Copy a block of pixels of one format to another format
 *
 *  \return 0 on success, or -1 if there was an error
 */
pub extern (C) def SDL_ConvertPixels(width : i32, height : i32,
                                     src_format : u32,
                                     src : &void,  src_pitch : i32,
                                     dst_format : u32,
                                     dmut dst : &void, dst_pitch : i32)-> i32;

/**
 *  Performs a fast fill of the given rectangle with \c color.
 *
 *  If \c rect is NULL, the whole surface will be filled with \c color.
 *
 *  The color should be a pixel of the format used by the surface, and
 *  can be generated by the SDL_MapRGB() function.
 *
 *  \return 0 on success, or -1 on error.
 */
pub extern (C) def SDL_FillRect
    (dmut dst : &SDL_Surface, rect : &SDL_Rect, color : u32);

pub extern (C) def SDL_FillRects
    (dmut dst : &SDL_Surface, rects : &SDL_Rect, count : i32, color : u32)-> i32;

/**
 *  Performs a fast blit from the source surface to the destination surface.
 *
 *  This assumes that the source and destination rectangles are
 *  the same size.  If either \c srcrect or \c dstrect are NULL, the entire
 *  surface (\c src or \c dst) is copied.  The final blit rectangles are saved
 *  in \c srcrect and \c dstrect after all clipping is performed.
 *
 *  \return If the blit is successful, it returns 0, otherwise it returns -1.
 *
 *  The blit function should not be called on a locked surface.
 *
 *  The blit semantics for surfaces with and without blending and colorkey
 *  are defined as follows:
 *  \verbatim
    RGBA->RGB:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source alpha-channel and per-surface alpha)
        SDL_SRCCOLORKEY ignored.
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB.
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        RGB values of the source color key, ignoring alpha in the
        comparison.

    RGB->RGBA:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source per-surface alpha)
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB, set destination alpha to source per-surface alpha value.
      both:
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        source color key.

    RGBA->RGBA:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source alpha-channel and per-surface alpha)
        SDL_SRCCOLORKEY ignored.
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy all of RGBA to the destination.
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        RGB values of the source color key, ignoring alpha in the
        comparison.

    RGB->RGB:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source per-surface alpha)
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB.
      both:
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        source color key.
    \endverbatim
 *
 *  You should call SDL_BlitSurface() unless you know exactly how SDL
 *  blitting works internally and how to use the other blit functions.
 */
pub aka SDL_BlitSurface = SDL_UpperBlit;

/**
 *  This is the public blit function, SDL_BlitSurface(), and it performs
 *  rectangle validation and clipping before passing it to SDL_LowerBlit()
 */
pub extern (C) def SDL_UpperBlit
    (src : &SDL_Surface, srcrect : &SDL_Rect,
     dmut dst : &SDL_Surface, dmut dstrect : &SDL_Rect)-> i32;

/**
 *  This is a semi-private blit function and it performs low-level surface
 *  blitting only.
 */
pub extern (C) def SDL_LowerBlit
    (src : &SDL_Surface, srcrect : &SDL_Rect,
     dmut dst : &SDL_Surface, dmut dstrect : &SDL_Rect)-> i32;

/**
 *  \brief Perform a fast, low quality, stretch blit between two surfaces of the
 *         same pixel format.
 *
 *  \note This function uses a static buffer, and is not thread-safe.
 */
pub extern (C) def SDL_SoftStretch(src : &SDL_Surface,
                                   srcrect : &SDL_Rect,
                                   dmut dst : &SDL_Surface,
                                   dmut dstrect : &SDL_Rect);

pub aka SDL_BlitScaled = SDL_UpperBlitScaled;

/**
 *  This is the public scaled blit function, SDL_BlitScaled(), and it performs
 *  rectangle validation and clipping before passing it to SDL_LowerBlitScaled()
 */
pub extern (C) def SDL_UpperBlitScaled
    (src : &SDL_Surface, srcrect : &SDL_Rect,
     dmut dst : &SDL_Surface, dmut dstrect : &SDL_Rect)-> i32;

/**
 *  This is a semi-private blit function and it performs low-level surface
 *  scaled blitting only.
 */
pub extern (C) def SDL_LowerBlitScaled
    (src : &SDL_Surface, srcrect : &SDL_Rect,
     dmut dst : &SDL_Surface, dmut dstrect : &SDL_Rect)-> i32;

/**
 *  \brief Set the YUV conversion mode
 */
pub extern (C) def SDL_SetYUVConversionMode(mode : SDL_YUV_CONVERSION_MODE);

/**
 *  \brief Get the YUV conversion mode
 */
pub extern (C) def SDL_GetYUVConversionMode()-> SDL_YUV_CONVERSION_MODE;

/**
 *  \brief Get the YUV conversion mode, returning the correct mode for the resolution when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC
 */
pub extern (C) def SDL_GetYUVConversionModeForResolution(width : i32, height : i32)-> SDL_YUV_CONVERSION_MODE ;
